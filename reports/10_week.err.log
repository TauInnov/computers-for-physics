Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# %%
# Root finding example: solve x*cos(x) = 0 near x ~ pi/2
g = lambda x: x*np.cos(x)
root = optimize.root_scalar(g, bracket=(0.1, 2.0))
print("root near (0.1,2.0):", root.root)

# Curve fitting example: y = a*x + b
rng = np.random.default_rng(0)
x = np.linspace(0, 10, 50)
a_true, b_true = 2.0, 1.0
y = a_true*x + b_true + rng.normal(0, 1.2, size=x.size)

def linear_model(x, a, b):
    return a*x + b

popt, pcov = optimize.curve_fit(linear_model, x, y)
a_hat, b_hat = popt
perr = np.sqrt(np.diag(pcov))

print(f"Estimated a={a_hat:.3f} Â± {perr[0]:.3f}, b={b_hat:.3f} Â± {perr[1]:.3f}")

fig, ax = plt.subplots()
ax.errorbar(x, y, yerr=1.2, fmt="o", label="data")
ax.plot(x, linear_model(x, *popt), label="fit")
ax.set_title("Linear fit with curve_fit")
ax.set_xlabel("x")
ax.set_ylabel("y")
ax.legend()
plt.show()

------------------


[31m---------------------------------------------------------------------------[39m
[31mNameError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[19][39m[32m, line 4[39m
[32m      1[39m [38;5;66;03m# %%[39;00m
[32m      2[39m [38;5;66;03m# Root finding example: solve x*cos(x) = 0 near x ~ pi/2[39;00m
[32m      3[39m g = [38;5;28;01mlambda[39;00m x: x*np.cos(x)
[32m----> [39m[32m4[39m root = [43moptimize[49m.root_scalar(g, bracket=([32m0.1[39m, [32m2.0[39m))
[32m      5[39m [38;5;28mprint[39m([33m"[39m[33mroot near (0.1,2.0):[39m[33m"[39m, root.root)
[32m      7[39m [38;5;66;03m# Curve fitting example: y = a*x + b[39;00m

[31mNameError[39m: name 'optimize' is not defined

