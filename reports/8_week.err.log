Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Try loading a demo image; fall back to a synthetic image if SciPy is unavailable
try:
    from scipy.datasets import face  # SciPy >= 1.10
    img = face()
except Exception:
    # Simple synthetic "image": gradient + circle
    Y, X = np.ogrid[:256, :256]
    circle = (np.hypot(X-128, Y-128) < 90).astype(float)
    grad = (X / X.max())[None, :]
    img_gray_syn = 0.6*grad + 0.4*circle
    img = np.stack([img_gray_syn, img_gray_syn, img_gray_syn], axis=-1)

# Convert to grayscale using standard luminance weights
img = img.astype(float)
img = img / (img.max() if img.max() > 1 else 255.0)
img_gray = img @ np.array([0.2126, 0.7152, 0.0722])

# SVD
U, s, Vt = np.linalg.svd(img_gray, full_matrices=False)
U.shape, s.shape, Vt.shape, float(s[0]), float(s[-1])

------------------


[31m---------------------------------------------------------------------------[39m
[31mTypeError[39m                                 Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[13][39m[32m, line 20[39m
[32m     18[39m [38;5;66;03m# SVD[39;00m
[32m     19[39m U, s, Vt = np.linalg.svd(img_gray, full_matrices=[38;5;28;01mFalse[39;00m)
[32m---> [39m[32m20[39m U.shape, s.shape, Vt.shape, [38;5;28;43mfloat[39;49m[43m([49m[43ms[49m[43m[[49m[32;43m0[39;49m[43m][49m[43m)[49m, [38;5;28mfloat[39m(s[-[32m1[39m])

[31mTypeError[39m: only length-1 arrays can be converted to Python scalars

